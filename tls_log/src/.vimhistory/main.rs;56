use retina_core::config::load_config;
use retina_core::runtime::Runtime;
use retina_core::subscription::tls_handshake::TlsHandshake;
use retina_filtergen::filter;

use std::fs::File;
use std::sync::atomic::{AtomicUsize, Ordering};
use std::sync::Mutex;
use std::io::Write;
use std::io::BufWriter;

#[filter("tls.sni ~ '10.100.0.2'")]
fn main() {
    env_logger::init();
    let config = load_config();
    let cnt = AtomicUsize::new(0);
    let file = Mutex::new(BufWriter::witch_capacity(2097152,File::create("tls.jsonl").expect("Error creating file")));
//
//    let file = File::create("tls.jsonl").expect("Error creating file");
    let callback = |tls: TlsHandshake| {
//        let mut wtr = file.lock().unwrap();
//
        let mut wtr = file.lock().unwrap();
//        log::debug!("{}", serde_json::to_string(&tls).unwrap());
//        serde_json::to_string(&tls).unwrap();
//        jsonl::write(&mut *wtr, &tls).unwrap();
        writeln!(&mut wtr, "{}", tls.five_tuple).unwrap();
//           (*wtr).write_all(&serde_json::to_vec(&tls).unwrap());
        cnt.fetch_add(1, Ordering::Relaxed);
    };
    let mut runtime = Runtime::new(config, filter, callback).unwrap();
    runtime.run();
    println!("Count: {:?}", cnt);
}
